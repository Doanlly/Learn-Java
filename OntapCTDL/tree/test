
package OntapCTDL.tree;

public class BST {
    class Tree {// đại diện cho mỗi nút trong cây
        public int val;
        public Tree left;
        public Tree right;
        public Tree(int val){ // constructor để khởi tạo mỗi nút
            this.val = val;
        }
    }
    class MyBST{

        private Tree mRoot; // nút gốc
        public MyBST(){
            
        }
        public Tree insert(Tree root, int value){ //root là nút gốc, value là giá trị caanf thêm vào
            //TH1 
            Tree newNode= new Tree(value);
            if(root == null){ // cây rỗng
                root = new Tree(value);

            }else{
               // cây rỗng
                Tree temp  = root; // dich chuyen temp den nut can tim
                while(true){
                    if(value > temp.val){// giá trị mới > giá trị temp thì check
                        if(temp.right ==null){ // nếu null thì gắn luôn cho no 
                            temp.right = newNode;//án nút con phải của temp bằng nút mới
                            break;
                        }else{
                            temp = temp.right; // tiếp tục vòng lặp để di chuyển xuống cây.
                        }

                    }
                    else if(value < temp.val){
                        if(temp.left ==null){
                            temp.left = newNode;
                            break;
                        }else {
                        temp = temp.left;
                        }
                    }
                    // nghĩa là nó sẽ két thúc lặp khi gặp trái hoặc phải null
                }
                return root;
            }
            return root;
            
        }
        //C2: su dụng đệ quy:
        public Tree insertrecu(Tree rootnode, int value){
            if(rootnode ==null){
                rootnode = new Tree(value);
            }
            if(value < rootnode.val){
                if(rootnode.left == null){
                    rootnode.left = new Tree(value);
                }
                else{
                     //nho hon thi dich trai
                insertrecu(rootnode.left, value);
                }
            }
            else{
                //truoc khi nhay sang ben phai thi kiem tra ben phai co cay khong
                if(rootnode.right == null){
                    rootnode.right = new Tree(value);
                }
                else {
                insertrecu(rootnode.right, value);
                }
            }
            return rootnode;
        }
        // xoa node key trong cay root
        // return cay moi da duoc xoa node
        // public Tree deleteTreeNode(Tree root, int key){
        //     if(root == null){
        //         return null;
        //     }
        //     // tìm node xóa
        //     if(key<root.val){  //  // kết quả thay đổi, nối cha với con của node đã xóa 
        //         root.left =  deleteTreeNode(root.left, key);
        //     }
        //     else if(key >root.val){
        //         // kết quả thay đổi, nối cha với con của node đã xóa 
        //         root.right = deleteTreeNode(root.right, key);
        //     }
        //     else{  // root.val ==key // xác định node xóa
        //         //TH1: root là node
        //         if(root.left ==null & root.right ==null){
        //             return null;
        //         }
        //         //TH2: co 1 con 
        //         if(root.left!= null && root.right != null){
        //             return root.left;
        //         }
        //         if(root.left ==null&& root.right!= null){
        //             return root.right;
        //         }
        //         //TH2: cẩ 2 co
        //         // tim node trai cung cay con  phen phai
        //         Tree leftMostNode = findLefeMostNode(root.right);
        //         root.val = leftMostNode.val;
        //         root.right = deleteTreeNode(root.right, leftMostNode.val);
                
        //         // if(root.left != null && root){

        //         // }
             
        //     }
        //     return root;
        // }
        // // tim node con trai cung
        // public Tree findLefeMostNode(Tree root){
        //     if(root == null) return null;
        //     Tree leftMostNode = root;
            
        //     while(leftMostNode.left != null){
        //         leftMostNode = leftMostNode.left;
        //     }
        //     return leftMostNode;
        // }
        public Tree deleteTreeNode(Tree root, int key) {
            if (root == null) {
                return null;
            }

            if (key < root.val) {
                root.left = deleteTreeNode(root.left, key);
            } else if (key > root.val) {
                root.right = deleteTreeNode(root.right, key);
            } else {
                if (root.left == null && root.right == null) {
                    return null;
                } else if (root.left == null) {
                    return root.right;
                } else if (root.right == null) {
                    return root.left;
                } else {
                    Tree leftMostNode = findLeftMostNode(root.right);
                    root.val = leftMostNode.val;
                    root.right = deleteTreeNode(root.right, leftMostNode.val);
                }
            }

            return root;
        }

        public Tree findLeftMostNode(Tree root) {
            if (root == null) {
                return null;
            }

            Tree leftMostNode = root;

            while (leftMostNode.left != null) {
                leftMostNode = leftMostNode.left;
            }

            return leftMostNode;
        }
        
        // in ra cây BST theo thứ tự tăng dần. 
        //Nó sử dụng kỹ thuật duyệt cây trung thứ tự (in-order traversal).
        void print(Tree node) {
            if (node != null) {
                print(node.left);
                System.out.print(node.val + " ");
                print(node.right);
            }
        }
        
        void printRoot() {
            if (mRoot != null) {
                System.out.println("Gia tri : " + mRoot.val);
            } else {
                System.out.println("Cây rỗng, không có gốc.");
            }
        }
    }
    public static void main(String[] args) {
        BST newTree = new BST();
        MyBST myBST = newTree.new MyBST();
        // myBST.mRoot = myBST.insert(myBST.mRoot,5);
        // myBST.mRoot = myBST.insert(myBST.mRoot,1);
        // myBST.mRoot = myBST.insert(myBST.mRoot,6);
        // myBST.mRoot = myBST.insert(myBST.mRoot,0);
        // myBST.mRoot = myBST.insert(myBST.mRoot,3);
        // myBST.mRoot = myBST.insert(myBST.mRoot,7);
        // myBST.mRoot = myBST.insert(myBST.mRoot,2);

        myBST.mRoot = myBST.insertrecu(myBST.mRoot, 5);
        myBST.mRoot = myBST.insertrecu(myBST.mRoot, 1);
        myBST.mRoot = myBST.insertrecu(myBST.mRoot, 6);
        myBST.mRoot = myBST.insertrecu(myBST.mRoot, 0);
        myBST.mRoot = myBST.insertrecu(myBST.mRoot, 3);
        myBST.mRoot = myBST.insertrecu(myBST.mRoot, 7);
        myBST.mRoot = myBST.insertrecu(myBST.mRoot, 2);

        myBST.print(myBST.mRoot);
        System.out.println();
        myBST.printRoot();
        System.out.println();

        // myBST.mRoot = myBST.deleteTreeNode(myBST.mRoot, 3);

        // myBST.print(myBST.mRoot);
        // myBST.printRoot();
    }
}
